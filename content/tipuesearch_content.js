var tipuesearch = {"pages": [{'title': '關於', 'text': '此內容管理系統以\xa0 https://github.com/mdecourse/cmsimde \xa0作為子模塊運轉，可以更改對應的版本運行，cmsimde可以持續改版，不會影響之前設置子模塊，使用舊版cmsimde運作。 \n 利用cmsimde靜態建立網志方 行業釋義法律： \n \n 1.在github建立倉儲，git clone到近端 \n 2.參考\xa0 https://github.com/mdecourse/newcms ，加入除cmsimde目錄外的所有內容 \n 以git子模塊添加\xa0 https://github.com/mdecourse/cmsimde  \xa0cmsimde \n 建立cmsimde目錄，並從github取下子模組內容。 \n 3.在近端維護時，將目錄更改為到倉庫中的cmsimde，以python wsgi.py啟動近端網際伺服器。 \n 動態內容編輯完成後，以generate_pages轉為靜態內容，以git add commit和push將內容推到超長。 \n 4.之後若要以git clone取下包含submodule的所有內容，執行： \n git clone --recurse-submodules  https://github.com/mdecourse/newcms.git \n', 'tags': '', 'url': '關於.html'}, {'title': '開發', 'text': 'https://github.com/mdecourse/cmsimde \xa0的開發，可以在一個目錄中放入cmsimde，然後將up_dir中的內容放到與cmsimde目錄同位階的地方，使用命令進入cmsimde目錄，執行python wsgi.py ，就可以啟動，以瀏覽器https：// localhost：9443就可以連接，以admin作為管理者密碼，就可以登錄維護內容。 \n cmsimde的開發採用Leo編輯器，打開cmsimde目錄中的cmsimde.leo就可以進行程序修改，結束後，以保留網際內容，只要將cmsimde外部的內容轉換回up_dir改版。 \n init.py位於up_dir目錄中，可以設置site_title與uwsgi等變數。 \n', 'tags': '', 'url': '開發.html'}, {'title': '測試', 'text': '', 'tags': '', 'url': '測試.html'}, {'title': 'SSH協議', 'text': 'set一個變數 \n 啟動隨身系統後開始就宣告Git指令可透過Putty session連線 \n', 'tags': '', 'url': 'SSH協議.html'}, {'title': 'HW1', 'text': '', 'tags': '', 'url': 'HW1.html'}, {'title': 'U14', 'text': '', 'tags': '', 'url': 'U14.html'}, {'title': 'Overview 概述', 'text': 'In this lesson, we will discuss transmission control protocol (TCP) and user datagram protocol (UDP), as well as their associated ports and protocols. We will specifically address the various email ports and protocols in use today, as well as discussing secure sockets layer/transport layer security (SSL/TLS) in the context of web security. Then, we will discuss file transfer protocol (FTP) and hypertext transfer protocol (HTTP) and their use on the Internet today, as well as some older technologies such as Telnet and its more secure alternative, secure shell (SSH). \n 在本課程中，我們將討論傳輸控制協議（TCP）和用戶數據報協議（UDP）以及它們相關的端口和協議。 我們將專門解決當今使用的各種電子郵件端口和協議，並在Web安全的背景下討論安全套接字層/傳輸層安全（SSL / TLS）。 然後，我們將討論文件傳輸協議（FTP）和超文本傳輸協議（HTTP）及其在當今Internet上的使用，以及一些較老的技術，例如Telnet及其更安全的替代方法，安全外殼（SSH）。 \n', 'tags': '', 'url': 'Overview 概述.html'}, {'title': 'TCP and UDP', 'text': 'TCP is a connection-oriented protocol that ensures the reliable transport of data segments from one device to another. During transmission, if a segment is dropped, it will be detected and resent or retransmitted by the originator device. Each communication is acknowledged upon receipt, providing a secure model to ensure successful communications. This type of transmission is great for all network data types, especially those that need delivery to be assured. \n When a TCP communication is initiated, the originator and receiver perform a “three-way handshake” before starting the data transmission. In the first step, the originator sends a packet with a synchronization (SYN) flag set. Next, the receiver acknowledges receipt of this SYN flagged packet by sending back a synchronization-acknowledged (SYN-ACK) flagged packet. Finally, the originator sends an acknowledgement of the synchronization-acknowledged flagged packet, and then data transmission occurs. \n TCP是一種面向連接的協議，可確保將數據段從一台設備可靠地傳輸到另一台設備。在傳輸過程中，如果某個段丟失，則發起方設備將檢測到該段並將其重新發送或重新發送。每次通信在收到後都會得到確認，從而提供一個安全的模型來確保成功進行通信。這種傳輸方式適用於所有網絡數據類型，尤其是那些需要確保傳輸的網絡數據類型。 \n 啟動TCP通信時，發起方和接收方在開始數據傳輸之前執行“三向握手”。 第一步，發起方發送一個設置了同步（SYN）標誌的數據包。 接下來，接收器通過發回同步確認（SYN-ACK）標記的數據包來確認此SYN標記的數據包的接收。 最後，始發者發送對已同步確認的標記數據包的確認，然後發生數據傳輸。 \n EXAMPLE \n Think of this like two students who want to discuss an important project that is upcoming. The first student, Bob, says to Jane, “Jane, I want to talk to you.” Next, Jane says, “Bob, I acknowledge that you want to talk to me and I am ready to listen.” Finally, Bob tells her, “Jane, I understand you are ready to listen. Let’s talk.” At this point, the two students can talk, knowing they are both ready to listen to each other. \n 就像兩個想討論即將開展的重要項目的學生一樣。 第一位學生鮑勃對簡說：“簡，我想和你說話。” \xa0 接下來，簡說：“鮑勃，我承認你想和我說話，我已經準備好傾聽。” \xa0 最後，鮑勃告訴她：“簡，我知道你已經準備好聽了。 讓我們談談。” \xa0 此時，兩個學生可以交談，知道他們倆都準備好了互相傾聽。 \n \n Diagram of TCP three-way handshake. Image used under CC-BY license from\xa0 National STEM Consortium . \n UDP, or user datagram protocol, was developed as a connectionless protocol in order to increase the speed of the network over TCP transmissions. Because of the three-way handshake in TCP, as well as all the delivery assurance and quality control, TCP has a good amount of network overhead that slows down its communications. Network engineers realized that sometimes you don’t need delivery assurance or quality control. So UDP was established. \n UDP is considered unreliable, because if a segment is dropped during transmission, the sending device doesn’t know and doesn’t care. There is no retransmission. Once data is sent, it is gone. This is good, though, for audio and video streaming. In these applications, the data transferred is enormously large, and if a single segment is dropped it doesn’t affect the overall quality of the audio or video sent. \n UDP（或用戶數據報協議）被開發為無連接協議，目的是通過TCP傳輸提高網絡速度。由於TCP中的三向握手以及所有的傳送保證和質量控制，TCP具有大量的網絡開銷，從而降低了其通信速度。網絡工程師意識到有時您不需要交付保證或質量控制。這樣就建立了UDP。 \n UDP被認為是不可靠的，因為如果在傳輸過程中丟棄了一個網段，則發送設備將不知道也不在乎。 沒有重傳。 數據一旦發送，就消失了。 但是，這對於音頻和視頻流來說是很好的。 在這些應用程序中，傳輸的數據非常大，如果丟棄單個段，則不會影響所發送的音頻或視頻的整體質量。 \n EXAMPLE \n I like to think of UDP as my college calculus teacher. He started at one side of the board at 8 a.m., and by 9 a.m. he was done at the other side of the board. He never asked if the students understood what he said or wrote, he just kept transmitting. This is a great example of UDP. \n 我喜歡將UDP視為我的大學微積分老師。 他在上午8點從董事會的一側開始，到上午9點，他在董事會的另一側完成了工作。 他從不問學生是否理解他所說或寫的內容，他只是不斷地傳播。 這是UDP的一個很好的例子。 \n \n Diagram of UDP transmission. Image used under CC-BY license from\xa0 National STEM Consortium . \n TCP Vs. UDP\xa0\xa0 TCPVs。UDP協議 \n TCP and UDP have many differences. TCP is reliable, but UDP is unreliable. TCP focuses on connection-oriented communications using the three-way handshake, while UDP is connectionless. TCP uses windowing, discussed in more detail later, to control the amount of data sent at a given time based on changing network speeds, but UDP simply transmits everything once with no windowing. TCP also supports segment sequencing; UDP just hopes it gets to the destination in the right order. Finally, TCP waits for acknowledgements, but UDP just hopes it got there. To simplify it, TCP is an assured and reliable communication method, UDP is just a best-effort model. \n TCP和UDP有很多區別。 TCP是可靠的，但UDP是不可靠的。 TCP專注於使用三向握手的面向連接的通信，而UDP是無連接的。 TCP使用開窗（稍後將更詳細地討論）來基於不斷變化的網絡速度來控制在給定時間發送的數據量，但是UDP僅傳輸所有信息一次而沒有開窗。 TCP還支持段排序； UDP只是希望它以正確的順序到達目的地。 最後，TCP等待確認，但是UDP只是希望它到達目的地。 為簡化起見，TCP是一種有保證且可靠的通信方法，UDP只是一種盡力而為的模型。 \n', 'tags': '', 'url': 'TCP and UDP.html'}, {'title': 'TCP IP Stack', 'text': 'Each client and server has an IP address. Clients and servers are identified on the network by their IP addresses. In addition to an IP address, each machine has numerous “ports” that we can utilize. A port is an endpoint to a logical connection. A client program specifies a particular server program on a computer in a network by identifying a port. Ports allow a single client to communicate simultaneously with multiple other devices, separating each session by using a designated port number. \n 每個客戶端和服務器都有一個IP地址。 客戶端和服務器通過其IP地址在網絡上進行標識。 除了IP地址外，每台機器都有許多我們可以利用的“端口”。 端口是邏輯連接的端點。 客戶端程序通過識別端口來指定網絡中計算機上的特定服務器程序。 端口允許單個客戶端與多個其他設備同時通信，並使用指定的端口號分隔每個會話。 \n \n EXAMPLE \n The best way to envision this is to think of an apartment building. Your building’s address may be 123 Main Street; this would be equivalent to your IP address. But how does the mailman know which door to use when delivering your package, since multiple families live at 123 Main Street? The mailman uses your apartment number, which defines which door in the building he would knock on to deliver your package. These apartment doors would be called ports in a computer, and the computer knows which programs and sessions requested information over the network by tracking the port numbers that make the requests. \n 設想此問題的最佳方法是考慮一棟公寓樓。 您建築物的地址可能是123 Main Street； 這相當於您的IP地址。 但是由於多個家庭居住在Main Street 123號，郵遞員如何知道在運送包裹時要使用哪扇門？ 郵遞員使用您的公寓號碼，該號碼定義了他敲樓時要送出包裹的門。 這些公寓門在計算機中稱為端口，計算機通過跟踪發出請求的端口號來知道哪些程序和會話在網絡上請求了信息。 \n \n EXAMPLE \n Similar to an apartment building, on the network, let’s assume the client has an IP address of 10.1.1.1, which we call the source IP. The computer’s web browser chose a port number of 1248 from which to initiate the communication and a destination of 172.16.1.2 (which would be a web server for some company) and a destination port of 80 (which is the common port number for all web page traffic). The server then replies from its IP address (172.16.1.2) and port 80 to the client who made the request at their IP address of 10.1.1.1 and port 1248. As they continue the conversation, they will continue to use these IP addresses and ports, and at the same time the web server can maintain other communications with other customers, just like the client can surf to other websites in other tabs in their browser simultaneously without mixing the data, since they are separated by the port numbers. The diagram below illustrates this communication. \n 與網絡上的公寓樓類似，我們假設客戶端的IP地址為10.1.1.1，我們將其稱為源IP。 計算機的Web瀏覽器選擇了用於發起通信的端口號1248，以及目的地172.16.1.2（對於某些公司而言將是Web服務器）和目的端口80（這是所有Web站點的通用端口號）。頁面訪問量）。 然後，服務器從其IP地址（172.16.1.2）和端口80答复給以其IP地址10.1.1.1和端口1248發出請求的客戶端。隨著他們繼續進行對話，他們將繼續使用這些IP地址和端口，同時Web服務器可以維持與其他客戶的其他通信，就像該客戶可以同時瀏覽其瀏覽器其他標籤中的其他網站一樣，而無需混合數據， 因為它們由端口號分隔。 下圖說明了這種通信。 \n \n Port numbers are considered either well-known or ephemeral. Well-known port numbers are between 1 and 1023, like the web browsing port number of 80 in our last example. Port 80 is reserved as a well-known port for all hypertext transfer protocol (HTTP) traffic. Ephemeral port numbers are considered “high-numbered” ports and start at 1024 and go up to 65,535. These are usually the ports used by the client making the request, as we saw in our web browsing example, above, when the client chose port 1248 as its requesting port. \n 端口號被認為是眾所周知的或短暫的。 眾所周知的端口號在1到1023之間，例如我們上一個示例中的Web瀏覽端口號80。 端口80保留為所有超文本傳輸協議（HTTP）通信的眾所周知的端口。 臨時端口號被認為是“高編號”端口，起始於1024，最高可達65,535。 這些通常是客戶端發出請求的端口，正如我們在上面的Web瀏覽示例中所見，當客戶端選擇端口1248作為其請求端口時。 \n \n', 'tags': '', 'url': 'TCP IP Stack.html'}, {'title': 'Networking Transfer Protocols\xa0網絡傳輸協議', 'text': "TCP/IP contains a suite of many different transfer protocols for routing information across networks. Each protocol uses a different well-known port to keep its traffic separate from the others. Web browsing occurs using either hypertext transfer protocol (HTTP) or hypertext transfer protocol secure (HTTPS). When it uses HTTP, it uses port 80. If, however, the client requests that the site be sent securely using encryption, then it uses the HTTPS protocol and port 443. When being sent securely, the client and server use either secure sockets layer (SSL) or transport layer security (TLS). These additional layers are put on top of the existing HTTP standard to encrypt the data connection between the client and the server. \n In addition to browsing the web, there are many other things that can be done on the network and each uses its own dedicated port number to keep the traffic separate. File transfer protocol (FTP) uses port 21. FTP is a standard network protocol used to transfer computer files from one host to another host over a TCP-based network, such as the Internet. FTP is built on a client-server architecture and uses separate control and data connections between the client and the server. \n Telnet is a text-based remote access program for computers that communicates over port 23. Telnet is a user command and an underlying TCP/IP protocol for accessing computers remotely. Through telnet, an administrator or another user can access someone else's computer remotely. Unfortunately, telnet is an unsecured protocol where all the information between the client and server is communicated in clear text, so anyone who can capture this data can read it easily. For this reason, secure shell (SSH), which uses port 22, was introduced to replace telnet. SSH is a cryptographic (encrypted) network protocol for initiating text-based shell sessions on remote machines, similar to telnet but with the added strength of encryption. \n The domain name system (DNS) is a hierarchical distributed naming system for computers, services, or any resource connected to the Internet or to a private network. It allows for the translation of IP addresses to domain names, and from domain names to IP addresses. Remote desktop protocol (RDP) is a proprietary protocol developed by Microsoft, which provides users with a graphical interface to connect to other computers over a network connection using port 3389. The user employs RDP client software for this purpose, while the other computer must run RDP server software. RDP is a huge step up over telnet and SSH, because you receive a graphical environment to control the other user’s machine, just as if you were sitting in front of their Windows desktop. \n Simple network management protocol (SNMP) is a popular protocol for network management. It is used for collecting information from and configuring network devices, such as servers, printers, hubs, switches, and routers, on an Internet protocol (IP) network. SNMP traffic is sent over port 161. \n Server message block (SMB) is a network protocol used for providing shared access to files, printers, and serial ports and miscellaneous communications between nodes on a network using port 139. \n The lightweight directory access protocol (LDAP) is a directory service protocol that runs over port 389. LDAP provides a mechanism used to connect to, search, and modify Internet directories. The LDAP directory service is based on a client-server model. \n TCP / IP包含一組用於在網絡之間路由信息的許多不同的傳輸協議。每種協議都使用不同的知名端口，以使其流量彼此獨立。使用超文本傳輸協議（HTTP）或安全超文本傳輸協議（HTTPS）進行Web瀏覽。當使用HTTP時，它將使用端口80。但是，如果客戶端請求使用加密安全地發送站點，則它將使用HTTPS協議和端口443。在安全發送時，客戶端和服務器將使用安全套接字層（SSL）或傳輸層安全性（TLS）。這些額外的層放在現有HTTP標準之上，以加密客戶端和服務器之間的數據連接。 \n 除了瀏覽網絡之外，網絡上還有許多其他事情可以做，每件事都使用自己的專用端口號來保持流量分開。 文件傳輸協議（FTP）使用端口21。FTP是一種標準網絡協議，用於通過基於TCP的網絡（例如Internet）將計算機文件從一台主機傳輸到另一台主機。 FTP建立在客戶端-服務器體系結構上，並在客戶端和服務器之間使用單獨的控制和數據連接。 \n Telnet是用於通過端口23進行通信的計算機的基於文本的遠程訪問程序。Telnet是用戶命令和用於遠程訪問計算機的基礎TCP / IP協議。 通過telnet，管理員或其他用戶可以遠程訪問其他人的計算機。 不幸的是，telnet是一種不安全的協議，其中客戶端與服務器之間的所有信息均以明文形式進行通信，因此任何可以捕獲此數據的人都可以輕鬆地讀取它。 因此，引入了使用端口22的安全外殼（SSH）來代替telnet。 SSH是一種加密（加密）網絡協議，用於在遠程計算機上啟動基於文本的Shell會話，類似於telnet，但具有增強的加密強度。 \n 域名系統（DNS）是用於計算機，服務或連接到Internet或專用網絡的任何資源的分層分佈式命名系統。 它允許將IP地址轉換為域名，也可以將域名轉換為IP地址。 遠程桌面協議（RDP）是Microsoft開發的專有協議，它為用戶提供圖形界面以使用端口3389通過網絡連接連接到其他計算機。用戶為此目的使用RDP客戶端軟件，而另一台計算機必須運行RDP服務器軟件。 RDP與telnet和SSH相比是一個巨大的進步，因為您將獲得一個圖形環境來控制其他用戶的計算機，就像您坐在他們的Windows桌面前一樣。 \n 簡單網絡管理協議（SNMP）是一種流行的網絡管理協議。 它用於從Internet協議（IP）網絡上的服務器，打印機，集線器，交換機和路由器等網絡設備收集信息並對其進行配置。 SNMP通信通過端口161發送。 \n 服務器消息塊（SMB）是一種網絡協議，用於提供對文件，打印機和串行端口的共享訪問以及使用端口139的網絡上節點之間的其他通信。 \n 輕型目錄訪問協議（LDAP）是運行在端口389上的目錄服務協議。LDAP提供了一種用於連接，搜索和修改Internet目錄的機制。 LDAP目錄服務基於客戶端-服務器模型。 \n \n Email\xa0 電子郵件 \n Email has evolved a lot over the years, but still operates on three main protocols. Simple mail transfer protocol (SMTP) is an Internet standard for sending email and most outbound email is sent using SMTP. SMTP uses port 25 to send email from network devices. \n POP3 is the most common account type for personal email, but messages are typically deleted from the server when you check your email. \n Internet message access protocol (IMAP) servers let you work with email messages without downloading them to your computer first. This allows for email to be synchronized (synced) across multiple devices, including your desktop, laptop, tablet, and smartphone. IMAP uses port 143 to receive and synchronize your email. The real benefit of using IMAP, especially in today’s multiple device access world, is that it can change the read and delete state of messages across the multiple devices. For example, if I read a message on my phone, when I log into my desktop, the message will also show as having been read already. \n 多年來，電子郵件已經有了很大的發展，但仍在三種主要協議上運行。簡單郵件傳輸協議（SMTP）是用於發送電子郵件的Internet標準，大多數出站電子郵件都是使用SMTP發送的。SMTP使用端口25從網絡設備發送電子郵件。 \n POP3是最常見的個人電子郵件帳戶類型，但是當您檢查電子郵件時，通常會將郵件從服務器中刪除。 \n Internet郵件訪問協議（IMAP）服務器使您可以處理電子郵件，而無需先將其下載到計算機上。 這允許跨多個設備（包括台式機，筆記本電腦，平板電腦和智能手機）同步（同步）電子郵件。 IMAP使用端口143接收和同步您的電子郵件。 使用IMAP的真正好處（尤其是在當今的多設備訪問世界中）是，它可以更改跨多個設備的消息的讀取和刪除狀態。 例如，如果我在手機上閱讀了一條消息，則當我登錄到桌面時，該消息也將顯示為已被閱讀。 \n", 'tags': '', 'url': 'Networking Transfer Protocols\xa0網絡傳輸協議.html'}, {'title': 'FTP', 'text': 'In the OSI (Open Systems Interconnection) model, the application layer uses protocols such as trivial file transfer protocol (TFTP), file transfer protocol (FTP), and file transfer protocol secure (FTPS using TLS/SSL) to allow users to migrate data in a client-server model. FTP concerns itself with data only and as such eliminates the overhead of extraneous information such as what HTTP allows in addition to the actual data (advertisements, banners, images, etc.). This alleviates processing and bandwidth overhead and allows the client to simply retrieve the data from the server. \n FTP services can be accessed using client software such as ftp.exe (provided in all Microsoft operating systems), third-party software such as Filezilla or WinSCP, and any modern/current browser. Most light-duty users outside a corporate environment will not use a client FTP (or its secure version) because web browsers can negotiate FTP as well as HTTP. Public FTP servers allow for an anonymous user name so the client can reach file directories specifically designed for public access. \n These network communications are passed through the presentation layer to the session layer, where sockets and sessions are created using logical port numbers as defined by TCP or UDP. TCP is stateful, connection-oriented and reliable. UDP is stateless, connectionless, and less reliable. The combination of source and destination address coupled with the logical port number creates a network socket, which establishes the session for process-to-process communication. \xa0 The material in this section is used under CC-BY license from \xa0 https://en.wikipedia.org/wiki/Transport_layer . \n 在OSI（開放系統互連）模型中，應用程序層使用諸如簡單文件傳輸協議（TFTP），文件傳輸協議（FTP）和安全文件傳輸協議（使用TLS / SSL的FTPS）之類的協議來允許用戶遷移數據在客戶端-服務器模型中。FTP僅關注數據本身，因此消除了額外信息的開銷，例如除了實際數據（廣告，橫幅，圖像等）之外，HTTP允許的信息。這減輕了處理和帶寬開銷，並使客戶端可以簡單地從服務器檢索數據。 \n 可以使用諸如ftp.exe（在所有Microsoft操作系統中提供）之類的客戶端軟件，諸如Filezilla或WinSCP之類的第三方軟件以及任何現代/最新的瀏覽器來訪問FTP服務。 公司環境之外的大多數輕型用戶將不會使用客戶端FTP（或其安全版本），因為Web瀏覽器可以協商FTP以及HTTP。 公用FTP服務器允許使用匿名用戶名，以便客戶端可以訪問專門為公用訪問而設計的文件目錄。 \n 這些網絡通信通過表示層傳遞到會話層，在會話層中，使用由TCP或UDP定義的邏輯端口號創建套接字和會話。 TCP是有狀態的，面向連接的且可靠的。 UDP是無狀態，無連接且可靠性較低。 源地址和目標地址以及邏輯端口號的組合創建了一個網絡套接字，該網絡套接字建立了進程間通信的會話。 \xa0 本節中的材料根據 https://en.wikipedia.org/wiki/Transport_layer的 CC-BY許可使用 。 \n \n Active vs. Passive\xa0 主動與被動 \n Active FTP is a point-to-point connection that the client initiates and connects to the FTP server port 21 for commands and port 20 for data. That means that the server will actively initiate the connections back to the client’s listening port and will require the client to allow these connections, which the firewall blocks by default. Passive FTP allows the client to initiate the data connection on port 21, and then the FTP server moves the command and data connections to random ports on the server (with numbers higher than 1023). By initiating the connection from the client side, the burden of allowing a pass-through on the firewall resides with the FTP server administrator, who is better equipped to set a range of ports allowing connectivity. \n For more information on active vs. passive FTP, visit this \xa0 website . \n 主動FTP是點對點連接，客戶端啟動該點並連接到FTP服務器端口21（用於命令）和端口20（用於數據）。這意味著服務器將主動啟動回到客戶端偵聽端口的連接，並要求客戶端允許這些連接，防火牆默認情況下會阻止這些連接。被動FTP允許客戶端在端口21上啟動數據連接，然後FTP服務器將命令和數據連接移至服務器上的隨機端口（數字大於1023）。通過從客戶端發起連接，允許通過防火牆的負擔由FTP服務器管理員承擔，他可以更好地設置一系列允許連接的端口。 \n 有關主動與被動FTP的更多信息，請訪問此 網站 。 \n Using FTP\xa0 使用FTP \n Accessing FTP public servers using the command line is not nearly as user-friendly as using a web browser. However, both methods are viable and in use in corporate networks. \n \n Open a web browser of choice \n Use this URL: ftp.funet.fi \n Click “pubs,” then “standards,” then “RFC” \n Search RFC 959 and access either the .txt or .pdf file (left-click) \n Search RFC 4217 and access either the .txt or .pdf file (left-click) \n If you actually needed the file you can right-click and save as. \n \n Now that you see the file structure, notice it is similar to navigating a local hard drive with the only difference being that you use the “/” (forward slash) instead of the “\\” (backslash) because you are accessing the folders through the Internet. \n Note: In this next step using the command-line interface, you will only be able to navigate the FTP server, and will not be able to transfer files, because ftp.exe does not support passive mode by default. You can use a command-line tool in a Linux Distro; or, in Windows, you can go to Passive-FTP.com and download the freeware. \n However, you can create a workaround by first allowing FTP through your firewall (be sure to put firewall restrictions back in place after the exercise), and then issuing the following commands after you enter the password: \n \n quote pasv \n \n 使用命令行訪問FTP公共服務器並不像使用Web瀏覽器那樣友好。但是，這兩種方法都是可行的，並且已在公司網絡中使用。 \n \n 打開選擇的網絡瀏覽器 \n 使用此URL：ftp.funet.fi \n 點擊“發布”，然後點擊“標準”，然後點擊“ RFC” \n 搜索RFC 959並訪問.txt或.pdf文件（單擊鼠標左鍵） \n 搜索RFC 4217並訪問.txt或.pdf文件（單擊鼠標左鍵） \n 如果您確實需要該文件，則可以右鍵單擊並另存為。 \n \n 現在您已經看到文件結構，請注意，它類似於瀏覽本地硬盤驅動器，唯一的區別是您使用“ /”（正斜杠）而不是“ \\”（反斜杠），因為您通過以下方式訪問文件夾互聯網。 \n 注意：在接下來的使用命令行界面的步驟中，您將只能瀏覽FTP服務器，並且將無法傳輸文件，因為ftp.exe默認情況下不支持被動模式。 您可以在Linux Distro中使用命令行工具。 或者，在Windows中，您可以轉到Passive-FTP.com並下載免費軟件。 \n 但是，您可以通過首先允許FTP通過防火牆（確保在練習後將防火牆限制放回原位），然後在輸入密碼後發出以下命令來創建解決方法： \n \n 引用pasv \n \n \n \n Image used under CC-BY license from Russell Burchill. \n \n Now the “dir, ls” (list directory contents), and “get” (download) commands will work. \n By default, the file will download to your user root at C:\\Windows\\Users\\** your user name ** or at the root of C:\\ (wherever your OS is installed). \n \n As a public FTP server set to passive mode, certain commands do not work and invoke the server to close the socket. If that happens, re-do your log on. \n \n Use the keyboard command \xa0 \xa0 + r and type ftp (from an administrative command line interface you can also type ftp). The prompt changes to ftp> \n \n 現在，“ dir，ls”（列出目錄內容）和“ get”（下載）命令將起作用。 \n 默認情況下，該文件將下載到用戶根目錄C：\\ Windows \\ Users \\ \xa0 **或 用戶名 **或C：\\根目錄（無論安裝了OS的位置）。 \n \n 將公共FTP服務器設置為被動模式後，某些命令將不起作用，並調用服務器以關閉套接字。 如果發生這種情況，請重新登錄。 \n \n 使用鍵盤命令 + r並鍵入ftp（在管理命令行界面中，您也可以鍵入ftp）。 提示符更改為ftp> \n \n Image used under CC-BY license from Russell Burchill. \n \n Type “help” and look at the commands. \n Type at the command prompt: open ftp.funet.fi. \n Follow the prompts to log on. \n Username: anonymous. \n Password: any generic e-mail (such as user@user.com). \n \n You get a welcome message and can now navigate through the directory structure you saw in the browser by typing the following commands: \n \n pwd — lists the current directory.\n \n \n cd — changes the directory. This may be in the form of:\n \n cd pub (refer to the URL path from the previous exercise), or \n cd/pub/standards/RFC/ \n \n \n \n \n 輸入“ help”並查看命令。 \n 在命令提示符下鍵入：打開ftp.funet.fi。 \n 按照提示進行登錄。 \n 用戶名：匿名。 \n 密碼：任何通用電子郵件（例如user@user.com）。 \n \n 您會收到一條歡迎消息，現在可以通過鍵入以下命令來瀏覽瀏覽器中看到的目錄結構： \n \n pwd-列出當前目錄。 \n \n \n cd —更改目錄。 可以採用以下形式： \n \n cd pub（請參閱上一練習中的URL路徑），或 \n cd / pub / standards / RFC / \n \n \n \n \n \n \n Image used under CC-BY license from Russell Burchill. \n \n \n \n Now if you are using the workaround, Mac, or Linux you can download a file using the “get” command: \n \n Image used under CC-BY license from Russell Burchill. \n \n \n \n 圖片由Russell Burchill根據CC-BY許可使用。 \n \n \n \n 現在，如果您使用的是變通方法，Mac或Linux，則可以使用“ get”命令下載文件： \n \n 圖片由Russell Burchill根據CC-BY許可使用。 \n \n Without the passive mode workaround, a third-party FTP client, Mac, or Linux this is as far as you can go. However, in the corporate environment you might be required to troubleshoot FTP on the local intranet, which would most likely be set to active FTP. Clearly, the need for command-line FTP service is fairly limited compared to using a browser. \n 如果沒有被動模式解決方法，則只能使用第三方FTP客戶端，Mac或Linux。 但是，在公司環境中，可能需要對本地Intranet上的FTP進行故障排除，這很可能會設置為活動FTP。 顯然，與使用瀏覽器相比，命令行FTP服務的需求非常有限。 \n', 'tags': '', 'url': 'FTP.html'}, {'title': 'SSL', 'text': 'Secure sockets layer (SSL) is a cryptographic protocol designed to secure network communications at the application layer. Netscape developed the original protocol in 1995 and SSL became deprecated and was replaced by transport layer security (TLS) in 2015. For more information about SSL, visit this \xa0 website . \n The most common place to see TLS/SSL in action is in your web browser. For example, most all web sites now default from http (port 80) to https (port 443) with TLS. It is a client-server model where the client initiates the request to connect and the server offers the secure protocol. \n 安全套接字層（SSL）是一種加密協議，旨在保護應用程序層的網絡通信安全。Netscape在1995年開發了原始協議，並且不贊成使用SSL，並在2015年由傳輸層安全性（TLS）取代。有關SSL的更多信息，請訪問此 網站 。 \n 實際使用TLS / SSL的最常見地方是您的Web瀏覽器。 例如，大多數網站現在默認使用TLS從http（端口80）更改為https（端口443）。 這是一種客戶端-服務器模型，其中客戶端發起連接請求，服務器提供安全協議。 \n \n EXAMPLE \n Try this: \n \n Type: http://facebook.com or http://google.com into the browser of your choice. Notice the new URL changed to https. \n \n \n Next, click on the padlock → connection. If you have an antivirus plug-in you might see the company’s certificate instead in browsers such as Internet Explorer. \n \n 試試這個： \n \n 在您選擇的瀏覽器中輸入：http://facebook.com或http://google.com。 請注意，新的URL更改為https。 \n \n \n 接下來，單擊掛鎖→連接。 如果您具有防病毒插件，則可能會在Internet Explorer之類的瀏覽器中看到該公司的證書。 \n \n \n Image used under CC-BY license from Russell Burchill. \n', 'tags': '', 'url': 'SSL.html'}, {'title': 'U15', 'text': 'Wireless LANs\xa0無線局域網 Overview 總覽 \n The popularity of wireless local area networks (WLAN) has increased exponentially because WLAN enables people to remain connected to the network and the Internet without being tethered by wires. In this unit, we are going to cover the concepts, components, standards, design considerations, and security of WLANs. IEEE 802.11 is the overarching standard for wireless LAN technology, and was developed and is maintained by the Institute of Electrical and Electronics Engineers (IEEE) to provide wireless Ethernet connectivity to a wired IEEE 802.3 network. \n 無線局域網（WLAN）的普及已成倍增加，因為WLAN使人們能夠保持連接到網絡和Internet，而不必受到電線的束縛。 在本單元中，我們將介紹WLAN的概念，組件，標準，設計注意事項和安全性。 IEEE 802.11是無線LAN技術的總體標準，由電氣和電子工程師協會（IEEE）開發和維護，以提供與有線IEEE 802.3網絡的無線以太網連接。 \n WLAN Concepts WLAN 概念 \n Wireless local area networks are broken down into two generalized categories: ad-hoc WLANs and infrastructure WLANs. In ad hoc wireless networks, the wireless devices communicate directly with each other without the need for a wireless access point. This mode is similar to a peer-to-peer network topology, where each device connects to each other device in a mesh configuration using radio frequency waves directly between each wireless device’s interface card. This is the wireless equivalent of connecting two workstations together using a crossover cable, thereby eliminating the need for network infrastructure like hubs and switches. \n The second category, infrastructure WLANs, is the version that is most often and widely utilized. When operating in infrastructure mode, the wireless devices communicate to a centralized wireless router or wireless access point, and then use that centralized device to initiate communication with other wireless or wired devices that are also attached to the centralized device. This is the wireless equivalent of connecting multiple workstations to a common hub or switch and utilizing that network device to create communication between the workstations. \n 無線局域網分為兩大類：即席WLAN和基礎設施WLAN。在自組織無線網絡中，無線設備之間直接相互通信，而無需無線接入點。此模式類似於點對點網絡拓撲，在這種拓撲中，每個設備都在網狀配置中使用射頻波直接在每個無線設備的接口卡之間連接到彼此。這相當於使用交叉電纜將兩個工作站連接在一起的無線方式，從而消除了對集線器和交換機等網絡基礎設施的需求。 第二類是基礎設施WLAN，是最常用和廣泛使用的版本。當在基礎結構模式下運行時，無線設備與集中式無線路由器或無線接入點進行通信，然後使用該集中式設備來啟動與也連接到該集中式設備的其他無線或有線設備的通信。這相當於將多個工作站連接到公共集線器或交換機，並利用該網絡設備在工作站之間創建通信。 \n', 'tags': '', 'url': 'U15.html'}, {'title': 'Wireless Devices\xa0無線設備', 'text': 'As previously stated, most wireless networks utilize infrastructure mode and make use of a wireless router or wireless access point to connect the multitude of wireless devices in a given network. A wireless router is used in most small office/home office (SOHO) networks. These devices combine a router, a switch, and a wireless access point and serve as a base station and gateway for the wireless devices. The wireless router allows the wireless devices to communicate with each other using its wireless access point and switch functionality, and then uses its router functionality to connect devices to the remote network: in most cases, the Internet. The wireless router often combines multiple devices into a single, small device. These features include a wireless access point (WAP), a switch, a router, a firewall, and a modem (either cable, fiber, or DSL depending on the Internet service provider). \n Wireless access points, which are integrated into SOHO wireless routers, can also be purchased as standalone units. These are most often seen in corporate environments as part of an enterprise network. A wireless access point enables a wired LAN to communicate with a wireless LAN. The standalone WAP does not interconnect the two networks, though, since it is not a router. A WAP is simply a physical device that converts the radio frequency into 1s and 0s that are easily understood by the physical switch. Note that all wireless devices and the devices on the wired LAN are seen as a single subnet in a standard network. A WAP operates like a hub, broadcasting all the information it receives over the radio frequency waves and relying on the connected devices to only listen to their own traffic. \n 如前所述，大多數無線網絡都利用基礎架構模式，並利用無線路由器或無線接入點來連接給定網絡中的眾多無線設備。在大多數小型辦公室/家庭辦公室（SOHO）網絡中使用無線路由器。這些設備將路由器，交換機和無線接入點結合在一起，並充當無線設備的基站和網關。無線路由器允許無線設備使用其無線接入點和交換機功能相互通信，然後使用其路由器功能將設備連接到遠程網絡：在大多數情況下為Internet。無線路由器通常將多個設備組合為一個小型設備。這些功能包括無線接入點（WAP），交換機，路由器，防火牆和調製解調器（取決於Internet服務提供商，是電纜，光纖還是DSL）。 \n 集成到SOHO無線路由器中的無線訪問點也可以作為獨立單元購買。這些通常在公司環境中被視為企業網絡的一部分。無線訪問點使有線局域網能夠與無線局域網進行通信。但是，獨立的WAP無法將兩個網絡互連，因為它不是路由器。 WAP只是將無線電頻率轉換為1和0的物理設備，物理交換機很容易理解。請注意，所有無線設備和有線LAN上的設備在標準網絡中都被視為單個子網。 WAP就像集線器一樣工作，它會通過射頻波廣播接收到的所有信息，並依靠連接的設備僅監聽其自身的流量。 \n \n Kyocera KR1 Mobile EV-DO router. Photo used under CC-BY-NC license from Scott Beale. \n Wireless network interface cards (NICs) for WiFi, Bluetooth, and infrared are generally integrated into motherboard circuitry. If your computer doesn’t have one built in, you have the ability to add one either using an external USB wireless network adapter, or installing one in a PCIe expansion slot; just remember to install the appropriate drivers for your operating system to enable proper operations. \n 用於WiFi，藍牙和紅外的無線網絡接口卡（NIC）通常集成在主板電路中。 如果您的計算機沒有內置計算機，則可以使用外部USB無線網絡適配器添加計算機，也可以在PCIe擴展插槽中安裝計算機。 只需記住為您的操作系統安裝適當的驅動程序即可啟用正確的操作。 \n', 'tags': '', 'url': 'Wireless Devices\xa0無線設備.html'}, {'title': 'Wireless Standards 無線標準', 'text': 'Background and History 背景和歷史 \n Wireless (Wi-Fi) networking speeds, the technology behind broadcast streams, and wireless security have greatly improved user connectivity, which in turn has increased the use of multi-purpose devices such as smartphones and tablets in corporate and SOHO networks. The freedom of Wi-Fi has become the infrastructure of choice and essentially relegated wired networks more to moving mass data traffic and less user traffic. Although it will not eliminate the wired infrastructure, because Wi-Fi access points need to connect to a wired device using the Ethernet standard, Wi-Fi allows greater expandability and access for IT departments in both corporate and SOHO environments. \n 無線（Wi-Fi）網絡速度，廣播流背後的技術以及無線安全性極大地改善了用戶連接性，進而增加了企業和SOHO網絡中諸如智能手機和平板電腦等多功能設備的使用。 Wi-Fi的自由度已成為首選的基礎架構，從本質上講，降低了有線網絡的傳輸效率，使之可以移動海量數據流量而減少用戶流量。儘管不會消除有線基礎架構，但由於Wi-Fi接入點需要使用以太網標準連接到有線設備，因此Wi-Fi允許企業和SOHO環境中的IT部門具有更大的可擴展性和訪問權限。 \n At the time when Wi-Fi became viable for implementation, the wired standard available in most corporate and SOHO networks operated at 100 Mbps. The Institute of Electrical and Electronics Engineers (IEEE) Standards Committee creates and maintains media access control (MAC) and physical layer (PHY) specifications for implementing WLAN computer communication. The IEEE 802.11 standard is overarching guidance that has been provided for the large number of wireless standards. The IEEE Wi-Fi standard is 802.11 with a small letter designation referring to the next revision (e.g., 802.11n, 802.11ac, 802.11ad, etc.). Each standard (like 802.11a, 802.11b, 802.11g, or 802.11n) is differentiated by the frequency range or frequency band that it utilizes. \n 當Wi-Fi成為可行的實現時，大多數公司和SOHO網絡中可用的有線標準以100 Mbps的速度運行。電氣和電子工程師協會（IEEE）標準委員會創建並維護用於實現WLAN計算機通信的媒體訪問控制（MAC）和物理層（PHY）規範。 IEEE 802.11標準是為大量無線標準提供的總體指導。 IEEE Wi-Fi標準是802.11，帶有小寫字母，表示下一個修訂版本（例如802.11n，802.11ac，802.11ad等）。每個標準（如802.11a，802.11b，802.11g或802.11n）都根據其使用的頻率範圍或頻帶進行區分。 \n The 802.11 standard was initially ratified in 1997 and devices compliant with the 802.11a and 802.11b revisions became commercially available soon after in 2000. Despite higher throughput, 802.11a devices were not as readily adopted as 802.11b devices. At the time Wi-Fi became viable to deploy 802.11b at a maximum throughput of 11 Mbps, wired networks were at a minimum of 100 Mbps in most corporate and SOHO environments. The slower throughput kept users more reliant on traditional desktop machines and less likely to use their new wireless-capable laptops wirelessly. Once 802.11g was sufficiently saturated in the market, the disparity between its 54 Mbps speed and the 100 Mbps speed of wired networks became less noticeable and consumers became more interested in being wireless. The industry continued to push for ways to design higher throughput devices and incorporate the hardware into mobile devices such as cell phones, tablets, and lighter-weight laptops. \n 802.11標準最初是在1997年批准的，並且與802.11a和802.11b修訂版兼容的設備在2000年之後很快就可以商業化使用。儘管吞吐量更高，但是802.11a設備不如802.11b設備那樣容易採用。當Wi-Fi能夠以11 Mbps的最大吞吐量部署802.11b時，在大多數公司和SOHO環境中，有線網絡的最低速度為100 Mbps。較低的吞吐量使用戶更依賴於傳統台式機，並且不太可能無線使用其具有無線功能的新型筆記本電腦。一旦802.11g在市場上充分飽和，其54 Mbps速度與100 Mbps有線網絡速度之間的差異就變得不那麼明顯，消費者對無線變得越來越感興趣。業界一直在尋求方法來設計更高吞吐量的設備，並將硬件整合到移動設備中，例如手機，平板電腦和更輕便的筆記本電腦。 \n Wireless LANs use two primary frequency bands: 2.4 GHz and 5 GHz. The 2.4 GHz range actually encompasses 2.4 to 2.5 GHz frequencies, while the 5 GHz range is 5.75 GHz to 5.875 GHz. Each frequency band has specific channels (or small portions of frequency) at which the devices operate to avoid overlapping with other wireless LAN devices. For 2.4 GHz frequency bands, it is important to choose channels 1, 6, and 11 to avoid overlapping frequencies. This is because overlapping can cause interference in your networks and cause data transmission and receiving issues for the devices. \n 無線局域網使用兩個主要頻段：2.4 GHz和5 GHz。 2.4 GHz範圍實際上包含2.4至2.5 GHz頻率，而5 GHz範圍是5.75 GHz至5.875 GHz。每個頻帶具有設備在其上操作的特定信道（或頻率的一小部分），以避免與其他無線LAN設備重疊。對於2.4 GHz頻帶，重要的是選擇信道1、6和11，以避免頻率重疊。這是因為重疊會導致網絡干擾，並導致設備的數據傳輸和接收問題。 \n Speed, Range, and Frequencies\xa0速度，範圍和頻率 \n Bandwidth speed has been greatly improved through the revisions after 802.11b, as shown in the table below. When discussing data flow and speed, the two terms referred to are bandwidth and throughput. Though they are often used interchangeably, the two terms are different and need to be understood. Simply put, bandwidth is the theoretical maximum of the given standard, whereas throughput is the actual potential in a real-world scenario. Many factors affect actual throughput, such as frequency, channel overlap, and broadcast streams. \n 如下表所示，通過802.11b的修訂，帶寬速度得到了極大的提高。 在討論數據流和速度時，所指的兩個術語是帶寬和吞吐量。 儘管它們經常互換使用，但這兩個術語是不同的，需要理解。 簡而言之，帶寬是給定標準的理論最大值，而吞吐量是實際情況下的實際潛力。 許多因素會影響實際吞吐量，例如頻率，頻道重疊和廣播流。 \n \n \n \n Revision 調整 \n (Max) Bandwidth（最大）帶寬 \n Frequency 頻率 \n \n \n 802.11a \n 54 Mbps \n 3.7/5.0 \n \n \n 802.11b \n 11 Mbps \n 2.4 \n \n \n 802.11g \n 54 Mbps \n 2.4 \n \n \n 802.11n \n 300/600 Mbps \n 2.4/5.0 \n \n \n 802.11ac \n 1700+ Gbps \n 5.0 \n \n \n \n The four wireless standards that are important to focus your studies on are 802.11a, 802.11b, 802.11g, and 802.11n. 802.11a operates in the 5 GHz frequency band, has a maximum bandwidth of 54 Mbps, and has a range of up to 35 meters indoors and 120 meters outdoors. 802.11b operates in the 2.4 GHz frequency band, has a maximum bandwidth of 11 Mbps, and has a range of up to 32 meters indoors and 140 meters outdoors. 802.11g operates in the 2.4 GHz frequency band, has a maximum bandwidth of 54 Mbps, and has a range of up to 32 meters indoors and 140 meters outdoors. 802.11n features a dual-band transceiver, operating in both the 2.4 GHz and 5 GHz frequency bands, has a maximum bandwidth of more than 300 Mbps, and has a range of up to 70 meters indoors and 250 meters outdoors. \n 專注於研究的四個無線標準是802.11a，802.11b，802.11g和802.11n。 802.11a工作於5 GHz頻帶，最大帶寬為54 Mbps，室內最大範圍為35米，室外最大範圍為120米。 802.11b在2.4 GHz頻帶上運行，最大帶寬為11 Mbps，室內最大範圍為32米，室外最大範圍為140米。 802.11g工作在2.4 GHz頻段，最大帶寬為54 Mbps，室內最大範圍為32米，室外最大範圍為140米。 802.11n具有工作在2.4 GHz和5 GHz頻帶上的雙頻收發器，最大帶寬超過300 Mbps，室內最大範圍為70米，室外最大範圍為250米。 \n The 2.4 GHz frequency band is more robust than the 5.0 GHz in that it is less susceptible to interference and has a wider distance range. However, many more devices such as RC toys, cordless telephones, other radio devices such as mice and keyboards, and microwave ovens also operate in the 2.4 GHz frequency, so it is more crowded, which can have a negative impact on throughput. Although the 5.0 GHz frequency band is less crowded, it is more susceptible to obstructions such as building infrastructure (i.e., walls, floors, steel beams, etc.) due to absorption. \n 2.4 GHz頻段比5.0 GHz更加健壯，因為它不易受到干擾，並且距離範圍更廣。但是，更多的設備（例如RC玩具，無繩電話，其他無線電設備（例如，鼠標和鍵盤）和微波爐）也以2.4 GHz頻率運行，因此擁擠不堪，這可能會對吞吐量產生負面影響。儘管5.0 GHz頻帶的擁擠程度較小，但由於吸收，它更容易受到諸如建築基礎設施（即牆壁，地板，鋼樑等）的障礙物的影響。 \n Beginning with the 802.11n standard and subsequently moving to the current 802.11ac standard, manufacturers incorporated multiple antennae to achieve higher throughput. Known as multiple-input multiple-output (MIMO), both revisions accomplish the higher throughput by allowing operation at two different channel widths (20 and 40 MHz) within the same frequency and operate on both 2.4 GHz and 5.0 GHz frequency bands at the same time. Wireless N (802.11n) and wireless AC have a much larger bandwidth and maximum range, because they use MIMO and multiple frequency bands working in tandem to increase transmission and reception. 從802.11n標准開始，然後發展到當前的802.11ac標準，製造商採用了多個天線來實現更高的吞吐量。這兩種版本都稱為多輸入多輸出（MIMO），通過允許在同一頻率內在兩個不同的信道寬度（20和40 MHz）下運行，並在2.4 GHz和5.0 GHz頻段上同時運行，從而實現了更高的吞吐量。時間。無線N（802.11n）和無線AC具有更大的帶寬和最大範圍，因為它們使用MIMO和多個頻段協同工作來增加傳輸和接收。 \n An important note is that wireless N, G, and B are all compatible because they all support the 2.4 GHz frequency, allowing for backward compatibility. If you use multiple standards, like B, G, and N devices at the same time on a singular wireless N wireless access point, the WAP will default back to wireless B standards to support each device, which will significantly slow down the network. Wireless N and wireless A are compatible because they both use the 5 GHz frequency band. However, wireless A is not compatible with wireless B or G devices. \n 重要說明是，無線N，G和B都兼容，因為它們都支持2.4 GHz頻率，從而實現了向後兼容性。如果您在單個無線N無線接入點上同時使用多個標準，例如B，G和N設備，則WAP將默認恢復為無線B標準以支持每個設備，這將大大降低網絡速度。無線N和無線A兼容，因為它們都使用5 GHz頻帶。但是，無線A與無線B或G設備不兼容。 \n', 'tags': '', 'url': 'Wireless Standards 無線標準.html'}, {'title': 'Privacy and Security 隱私和安全', 'text': 'Due to the nature of Wi-Fi being transmitted through radio frequencies, the data transferred is susceptible to being viewed and captured by any other radio receiver. Encryption and network security have become a paramount concern for IT professionals at all levels. If a Wi-Fi network is set up without encryption it is “open,” and anybody with packet sniffing software in the vicinity can capture the transmissions between the host and the wireless access point. Public cafes and retailers offering open access do so as a courtesy, but the user must know that any online login information, such as connecting to a bank, Facebook, or Twitter, is not secure and is susceptible to capture. For the prospective technician, you must know the current encryption types and best practices to secure a WLAN. \n 由於Wi-Fi是通過射頻傳輸的，因此傳輸的數據很容易被任何其他無線電接收器查看和捕獲。 加密和網絡安全已成為各級IT專業人員最關心的問題。 如果建立了未加密的Wi-Fi網絡，則它是“開放的”，附近裝有數據包嗅探軟件的任何人都可以捕獲主機與無線訪問點之間的傳輸。 提供開放訪問權限的公共咖啡館和零售商這樣做是出於禮貌，但是用戶必須知道任何在線登錄信息（例如，連接到銀行，Facebook或Twitter）都不安全並且容易被捕獲。 對於準技術人員，您必須了解當前的加密類型和最佳做法以保護WLAN。 \n Encryption Types 加密類型 \n In order to provide security for wireless networks, the 802.11 standards provide for three major types of password protection/encryption: wired equivalent privacy (WEP), Wi-Fi protected access (WPA), and Wi-Fi protected access 2 (WPA2). \n 為了提供無線網絡的安全性，802.11標準提供了三種主要的密碼保護/加密類型：有線等效保密（WEP），Wi-Fi保護訪問（WPA）和Wi-Fi保護訪問2（WPA2）。 \n Wired Equivalent Privacy (WEP)\xa0有線等效保密（WEP） \n \n In the original 802.11 standard, the only security provided was WEP, which claims to be as secure as a wired network connection. This wireless connection was secured using encryption with a 40-bit WEP key that all access points and client devices would use (preshared key). This symmetric encryption was a good idea, but since the key was so small (40 bits), it was quickly broken by attackers.To solve this, WEP evolved into using a 64-bit key and could support keys up to 128 bits, which would provide strong encryption. Unfortunately, the WEP algorithm used for encryption also relied on using an initialization vector (IV) in combination with the preshared key to create the strong encryption, but the IV was only created at 24 bits and is sent in plain text or clear text during the preshared key exchange. This was quickly compromised by attackers using a brute-force attack to determine the password using the weak IV. Many utilities exist in the open-source realm that can crack WEP passwords within just a few minutes on modern hardware. For this reason, WEP is considered insecure today and should never be used in your networks. \n \n 在原始802.11標準中，唯一提供的安全性是WEP，它聲稱與有線網絡連接一樣安全。通過使用所有訪問點和客戶端設備都將使用的40位WEP密鑰（預共享密鑰）進行加密來保護此無線連接。這種對稱加密是一個好主意，但是由於密鑰太小（40位），攻擊者很快就將其破壞了。 \n 為了解決這個問題，WEP演變為使用64位密鑰，並且可以支持高達128位的密鑰，從而可以提供強大的加密功能。 不幸的是，用於加密的WEP算法還依賴於使用初始化向量（IV）結合預共享密鑰來創建強加密，但是IV僅以24位創建，並且在加密期間以純文本或明文發送。預共享密鑰交換。 攻擊者使用強力攻擊使用弱IV來確定密碼，從而很快破壞了這一安全性。 開源領域中存在許多實用程序，可以在短短幾分鐘內在現代硬件上破解WEP密碼。 因此，WEP在今天被認為是不安全的，永遠不要在您的網絡中使用。 \n \n \n Wi-Fi Protected Access (WPA)\xa0Wi-Fi保護訪問（WPA） \n The WPA standard was introduced to replace the insecure WEP. WPA used a 48-bit IV in place of WEP’s 24-bit IV. This upgraded IV uses a temporal key integrity protocol (TKIP). TKIP is an IEEE standard that was designed to provide more secure encryption. TKIP is a suite of algorithms that allows WLAN equipment to upgrade to TKIP without replacing hardware. TKIP encrypts each data packet with a unique encryption key, and the keys are much stronger than WEP. To increase key strength, TKIP includes four additional algorithms. In addition to TKIP, the WPA standard uses message integrity check (MIC) to confirm that data was not modified in transit. MIC uses a “hash” to verify that a message has not been altered. WPA supported both preshared key mode and enterprise mode. In enterprise mode, users are required to authenticate before exchanging their keys and each key between the client and access point is only temporary, reducing the chance of compromise. Unfortunately, WPA also suffered security flaws centered on the use of passphrases and pre-shared key (PSK) management and is now also considered to be unsecure. \n 引入了WPA標準來代替不安全的WEP。WPA使用48位IV代替WEP的24位IV。此升級的IV使用臨時密鑰完整性協議（TKIP）。TKIP是旨在提供更安全的加密的IEEE標準。TKIP是一套算法，可以使WLAN設備升級到TKIP，而無需更換硬件。TKIP使用唯一的加密密鑰加密每個數據包，並且該密鑰比WEP強得多。為了增強按鍵強度，TKIP包括四個附加算法。除了TKIP，WPA標準還使用消息完整性檢查（MIC）來確認數據在傳輸過程中沒有被修改。MIC使用“哈希”來驗證消息是否未被更改。WPA支持預共享密鑰模式和企業模式。在企業模式下，要求用戶在交換密鑰之前進行身份驗證，並且客戶端和訪問點之間的每個密鑰只是臨時的，從而減少了洩露的機會。不幸的是，WPA還遭受了圍繞密碼短語和預共享密鑰（PSK）管理的安全缺陷，現在也被認為是不安全的。 \n Wi-Fi Protected Access 2 (WPA2) Wi-Fi保護訪問2（WPA2） \n Wi-Fi protected access version 2 (WPA2) was implemented to replace both WEP and WPA because of the insecurities with the 24-bit and 48-bit initialization vectors. WPA2 requires stronger encryption and integrity checking, using counter mode (CCMP) with cipher block chaining message authentication code protocol for integrity checking. Additionally, the encryption used for WPA2 is the advanced encryption standard (AES) with a 128-bit key, the same algorithm used by the United States government to protect their classified networks. Using WPA2 creates a secure wireless network, but only when used with good passwords and shared keys. WPA2 also supports enterprise mode for centralized user authentication (used in corporate networks) and a personal mode for preshared key support (used in most homes and small offices). The key to security with WPA2 is a strong password, since the current method of breaking into a WPA2 network is to use brute force attacks against the preshared key. If your key is long and complex, the attackers will not be able to penetrate your WPA2 wireless networks. \n 由於24位和48位初始化向量的不安全性，實施了Wi-Fi保護訪問版本2（WPA2）來替代WEP和WPA。 WPA2需要使用計數器模式（CCMP）和密碼塊鏈接消息身份驗證代碼協議進行更強的加密和完整性檢查，以進行完整性檢查。 此外，用於WPA2的加密是具有128位密鑰的高級加密標準（AES），與美國政府用來保護其機密網絡的算法相同。 使用WPA2可以創建安全的無線網絡，但前提是要使用良好的密碼和共享密鑰。 WPA2還支持用於集中式用戶身份驗證的企業模式（用於公司網絡）和用於預共享密鑰支持的個人模式（用於大多數家庭和小型辦公室）。 使用WPA2進行安全保護的密鑰是一個強密碼，因為當前闖入WPA2網絡的方法是對預共享密鑰使用暴力攻擊。 如果密鑰又長又復雜，攻擊者將無法穿透您的WPA2無線網絡。 \n Wi-Fi Protected Access 2 Enterprise Wi-Fi保護訪問2企業 \n WPA2 enterprise is a client/server model using the remote authentication dial-in user service (RADIUS) protocol found in larger corporate networks. The RADIUS server runs in the application layer using UDP (user datagram protocol) as a transport method, and is usually a software background service running on a UNIX or Windows server. WPA2 enterprise eliminates a shared key and replaces it with a username and a password to connect to the corporate Wi-Fi network. \n \n WPA2企業版是使用大型企業網絡中使用的遠程身份驗證撥入用戶服務（RADIUS）協議的客戶端/服務器模型。 RADIUS服務器使用UDP（用戶數據報協議）作為傳輸方法在應用程序層中運行，通常是在UNIX或Windows服務器上運行的軟件後台服務。 WPA2企業消除了共享密鑰，並用用戶名和密碼代替了共享密鑰以連接到公司的Wi-Fi網絡。 \n', 'tags': '', 'url': 'Privacy and Security 隱私和安全.html'}, {'title': 'Wireless Networking Types\xa0無線網絡類型', 'text': 'In addition to Wi-Fi networks, there are other wireless options that exist, such as Bluetooth and infrared. These types of technologies are usually used for Personal Area Networks (PANs) in order to connect (or pair) two devices in an ad hoc manner. \n \n 除了Wi-Fi網絡外，還存在其他無線選項，例如藍牙和紅外線。 這些類型的技術通常用於個人區域網（PAN），以便以臨時方式連接（或配對）兩個設備。 \n \n Bluetooth radio is used to connect many kinds of devices, including mice, keyboards, remotes, smartphones, tablets, printers, projectors, and many others. Just as USB replaced most cables between devices and the workstation, Bluetooth replaces most previous wireless technologies for personal area networks (like infrared). Bluetooth does not require direct line of sight between connected devices. Bluetooth is a low-speed, short-range networking technology that comes in three classes. Class 1, which is not common, can transmit up to 100 meters. Class 2, the most common Bluetooth in use today, can travel up to 10 meters. Class 3, a very short-range variant, only goes one meter. Bluetooth can operate at up to three Mbps, which in today’s modern computer networks is considered extremely slow. \n \n 藍牙無線電用於連接多種設備，包括鼠標，鍵盤，遙控器，智能手機，平板電腦，打印機，投影儀等。 就像USB取代了設備與工作站之間的大多數電纜一樣，藍牙也取代了個人區域網（例如紅外線）中以前的大多數無線技術。 藍牙不需要所連接設備之間的直接視線。 藍牙是一種低速，短距離網絡技術，分為三類。 不常見的1類可以傳輸100米。 第2類，是當今使用的最常見的藍牙，可以傳輸10米。 3級是一種非常短距離的變體，只能行駛一米。 藍牙可以以高達3 Mbps的速度運行，這在當今的現代計算機網絡中被認為是非常慢的。 \n \n Infrared existed before Bluetooth and was a short-range, low-speed, line-of-sight communication path. It was heavily used to connect personal digital assistants (PDAs) and wireless mice and keyboards. Not common in contemporary computers, it was replaced almost entirely by Bluetooth, but some machines keep an integrated infrared sensor for backward compatibility. If you have a need for infrared, but it isn’t included on your machine, you can add an infrared sensor through a USB adapter. \n \n 紅外技術早於藍牙技術就已存在，它是一種短距離，低速，視線通信的路徑。 它被大量用於連接個人數字助理（PDA）和無線鼠標和鍵盤。 在當代計算機中並不常見，它幾乎已完全被藍牙取代，但某些機器保留了集成的紅外傳感器以實現向後兼容性。 如果您需要紅外線，但您的機器中沒有紅外線，則可以通過USB適配器添加紅外線傳感器。 \n', 'tags': '', 'url': 'Wireless Networking Types\xa0無線網絡類型.html'}, {'title': 'HW3', 'text': '', 'tags': '', 'url': 'HW3.html'}, {'title': 'Tic Tac Toe Game 井字遊戲', 'text': 'In 3 previous exercises, we built up a few components needed to build a Tic Tac Toe game in Python: \n 在之前的3個練習中，我們建立了一些用Python構建Tic Tac Toe遊戲所需的組件： \n 1. Draw the Tic Tac Toe game board \xa0 \xa0畫井字遊戲板 \n 2. Checking whether a game board has a winner \xa0\xa0 檢查遊戲板是否有贏家 \n 3. Handle a player move from user input \xa0 \xa0 處理玩家從用戶輸入的移動 \n The next step is to put all these three components together to make a two-player Tic Tac Toe game! Your challenge in this exercise is to use the functions from those previous exercises all together in the same program to make a two-player game that you can play with a friend. There are a lot of choices you will have to make when completing this exercise, so you can go as far or as little as you want with it. \n 下一步是將所有這三個組成部分放在一起，組成一個兩人遊戲的Tic Tac Toe遊戲！在本練習中，您面臨 的挑戰是在同一程序中一起使用以前的練習中的功能，以製作一個可以與朋友一起玩的兩人遊戲。完成本 練習時，您將有很多選擇，因此您可以根據自己的需要進行選擇。 \n Here are a few things to keep in mind:\xa0 \n 請記住以下幾點： \n \n You should keep track of who won - if there is a winner, show a congratulatory message on the screen. \n \n 您應該跟踪誰贏了-如果有贏家，則在屏幕上顯示祝賀消息。 \n \n If there are no more moves left, don’t ask for the next player’s move! \n \n 如果再也沒有其他動作，請不要要求下一個玩家的動作！ \n \n \n As a bonus, you can ask the players if they want to play again and keep a running tally of who won more - Player 1 or Player 2. \n 作為獎勵，您可以詢問玩家是否想再次玩，並保持連續統計誰贏得了更多的獎金-玩家1或玩家2。 \n', 'tags': '', 'url': 'Tic Tac Toe Game 井字遊戲.html'}, {'title': 'Pick Word', 'text': '\xa0 This exercise is Part 1 of 3 of the Hangman exercise series. The other exercises are: \xa0 Part 2 \xa0 and \xa0 Part 3 . \n \xa0 本練習是《 Hangman》練習系列3的第1部分。其他練習是： 第2 部分 和 第3部分 。 \n \n \xa0 In this exercise, the task is to write a function that picks a random word from a list of words from the\xa0 SOWPODS dictionary . Download this file and save it in the same directory as your Python code. This file is\xa0 Peter Norvig ’s compilation of the dictionary of words used in professional Scrabble tournaments. Each line in the file contains a single word. \n \xa0 在本練習中，任務是編寫一個函數，該函數從 SOWPODS詞典 的單詞列表中選擇一個隨機單詞 。 下載此文件並將其保存在與Python代碼相同的目錄中。 該文件是 Peter Norvig 在專業Scrabble錦標賽中使用的單詞詞典的彙編。 文件中的每一行都包含一個單詞。 \n \n \xa0 Hint: use the Python\xa0 random \xa0library for picking a random word. \n \xa0 提示：使用Python random 庫選擇隨機單詞。 \n \n Aside: what is SOWPODS\xa0 \xa0題外話：什麼是SOWPODS \n \xa0 SOWPODS is a word list commonly used in word puzzles and games (like Scrabble for example). It is the combination of the Scrabble Player’s Dictionary and the Chamber’s Dictionary. (The history of SOWPODS is quite interesting, I highly recommend reading the\xa0 Wikipedia article if you are curious .) \n \xa0 SOWPODS是單詞拼圖和遊戲中常用的單詞列表（例如，Scrabble）。它是拼字遊戲玩家詞典和商會詞典的組合。（SOWPODS的歷史非常有趣， 如果您有好奇心 ，我強烈建議閱讀 Wikipedia文章 。） \n \n Previous exercises with similar concepts\xa0 \xa0以前的類似概念練習 \n \xa0 In previous exercises, we have covered all the necessary skills needed to complete this exercise. Check out: \n \xa0 在以前的練習中，我們介紹了完成此練習所需的所有必要技能。 查看： \n \n Exercise 22: read from a file \xa0 \xa0 \xa0(\xa0 練習22：讀取文件 \xa0) \n Exercise 9: generating a random number \xa0 \xa0 \xa0 \xa0 (\xa0 練習9：生成一個隨機數 \xa0) \n Exercise 3: accessing an element of a list \xa0 \xa0 \xa0 (\xa0 練習3：訪問列表的元素 \xa0) \n \n \n Brief concept review\xa0\xa0簡要概念回顧 \n \n Reading a file\xa0\xa0讀取文件 \n \xa0 The Python way of reading a file from disk is to use the\xa0 with \xa0construction together with a\xa0 while \xa0loop: \n \xa0 從磁盤讀取文件的Python方法是將 with 構造與 while 循環 一起使用 ： \n \xa0 \n with   open ( \'filename.txt\' ,   \'r\' )   as   f : \n   line   =   f . readline () \n   while   line : \n     # do something to the line, for example \n     # saving it to disk \n     line   =   f . readline () \n\n print ( "The entire file as been read!" ) \n \xa0 The file\xa0 filename.txt \xa0 should be in the same directory as your Python script. \n \xa0 該文件 filename.txt 應與Python腳本位於同一目錄中。 \n \n \xa0 The idea behind the\xa0 with \xa0 construction is that it isolates any variables defined in the \xa0 with \xa0 line from the rest of your code. When you are dealing with files, this means properly opening and closing the files. The \xa0 open \xa0 line in the \xa0 with \xa0 statement actually does the opening of the file and saves the file object in the variable \xa0 f . The \xa0 \'r\' \xa0 passed into the \xa0 open() \xa0 function tells Python “open the file for reading”. If the \xa0 \'w\' \xa0 argument is passed instead, Python will interpret this as “open the file and allow writing to it.” \n \xa0 with 構造 背後的想法 是，它將 with 行中 定義的所有變量 與其餘代碼 隔離開來 。 在處理文件時，這意味著正確打開和關閉文件。 語句中 的 open 行 with 實際上是打開文件並將文件對象保存在變量中的 f 。 將 \'r\' 傳遞到 open() 函數告訴Python的“打開文件進行讀取”。 如果 \'w\' 改為傳遞參數，Python會將其解釋為“打開文件並允許對其進行寫入”。 \n \n \xa0 After all the code inside the\xa0 with \xa0 block is finished, the file \xa0 f \xa0 is properly closed by Python. So by the time the program starts executing the \xa0 print \xa0 statement, the file is already closed. \n \xa0 with 塊中的 所有代碼 完成後， f Python將正確關閉 文件 。 因此，當程序開始執行該 print 語句時，該文件已經關閉。 \n \n \xa0 One thing to remember when reading lines from a file in this way is that a line contains a\xa0 \\n , or a newline character at the end. So before processing the line, it is usually a good idea to use \xa0 .strip() \xa0 to remove the newlines and spaces from the start and end of the lines, like so: \n \xa0 以這種方式從文件中讀取行時要記住的一件事是，行 \\n 的末尾 包含 或換行符。 因此，在處理行之前，通常最好 .strip() 從行的開頭和結尾刪除換行符和空格，如下所示： \n \n with   open ( \'filename.txt\' ,   \'r\' )   as   f : \n   line   =   f . readline () . strip () \n   while   line : \n     # do something with the \'line\' variable \n     line   =   f . readline () . strip () \n \xa0 There are many ways of reading lines from files. If for example you want to read all the lines of the file into a list, you can use the following variant: \n \xa0 有許多方法可以從文件中讀取行。 例如，如果要將文件的所有行都讀入列表，則可以使用以下變體： \n \n with   open ( \'filename.txt\' ,   \'r\' )   as   f : \n   lines   =   f . readlines () \n \xa0 At the end of this code, the variable\xa0 lines \xa0 will have all the elements from the file in a Python list. \n \xa0 在此代碼的結尾，變量 lines 將在Python列表中包含文件中的所有元素。 \n \n \xa0 Here are a few references about opening files, if you would like to read more: \n \xa0 如果您想了解更多信息，這裡有一些有關打開文件的參考： \n \n Learn Python the Hard Way page about reading files \n The Python 3.5 documentation about \xa0 reading and writing files \n \n \n Generating a random number\xa0 \xa0產生一個隨機數 \n \xa0 Python’s\xa0 random \xa0 library is used to do operations with random numbers. For a list of the full methods available in the \xa0 random \xa0 library, check the \xa0 Python 3 documentation of the random library . \n \xa0 Python的 random 庫用於對隨機數進行運算。 有關該 random 庫中 可用的完整方法的列表 ，請查看 random庫 的 Python 3文檔 。 \n \n \xa0 The two methods that might be useful for this exercise are\xa0 random.choice() \xa0 or \xa0 random.randint() . The documentation is easy to read, so check out the docs for how these methods work! \n \xa0 此練習可能有用的兩種方法是 random.choice() 或 random.randint() 。 該文檔易於閱讀，因此請查看文檔以了解這些方法的工作方式！ \n', 'tags': '', 'url': 'Pick Word.html'}, {'title': 'Guess Letters', 'text': 'Exercise 31（and \xa0 Solution ） 練習31（解答） \n This exercise is Part 2 of 3 of the Hangman exercise series. The other exercises are: \xa0 Part 1 \xa0 and \xa0 Part 3 . \n 該練習是《Hangman》練習系列3的第2部分。其他練習是：第1部分和第3部分。 \n Let’s continue building Hangman. In the game of Hangman, a clue word is given by the program that the player has to guess, letter by letter. The player guesses one letter at a time until the entire word has been guessed. (In the actual game, the player can only guess 6 letters incorrectly before losing). \n 讓我們繼續建立Hangman。在《Hangman》遊戲中，提示詞是由玩家逐字母猜測的程序給出的。玩家一次猜一個字母，直到猜完整個單詞。 （在實際遊戲中，玩家只能輸錯6個字母）。 \n Let’s say the word the player has to guess is “EVAPORATE”. For this exercise, write the logic that asks a player to guess a letter and displays letters in the clue word that were guessed correctly. For now, let the player guess an infinite number of times until they get the entire word. As a bonus, keep track of the letters the player guessed and display a different message if the player tries to guess that letter again. Remember to stop the game when all the letters have been guessed correctly! Don’t worry about choosing a word randomly or keeping track of the number of guesses the player has remaining - we will deal with those in a future exercise. \n 假設玩家必須猜出的單詞是“ EVAPORATE”。在本練習中，編寫要求玩家猜出字母並在提示詞中顯示正確猜出的字母的邏輯。現在，讓玩家猜無限次，直到獲得完整的單詞為止。作為獎勵，跟踪玩家猜出的字母，如果玩家嘗試再次猜出該字母，則顯示不同的消息。記住正確猜出所有字母后，停止遊戲！不必擔心隨機選擇一個單詞或跟踪玩家剩餘的猜測數-我們將在以後的練習中處理這些猜測。 \n An example interaction can look like this: \n \n >>> Welcome to Hangman!\n_ _ _ _ _ _ _ _ _\n>>> Guess your letter: S\nIncorrect!\n>>> Guess your letter: E\nE _ _ _ _ _ _ _ E\n... \n \n And so on, until the player gets the word. \n 一個互相影響的例子如下所示: \n \n >>>歡迎來到Hangman!\n_ _ _ _ _ _ _ _ _\n>>>猜你的字母: S\n不對!\n>>>猜你的字母: E\nE _ _ _ _ _ _ _ E\n... \n \n 依此類推，直到玩家明白。 \n', 'tags': '', 'url': 'Guess Letters.html'}, {'title': 'Hangman', 'text': 'Exercise 32（and\xa0 Solution ） 練習32（解答） \n This exercise is Part 3 of 3 of the Hangman exercise series. The other exercises are: \xa0 Part 1 \xa0 and \xa0 Part 2 . \n 該練習是《Hangman》練習系列3的第3部分。其他練習是：第1部分和第2部分。 \n You can start your Python journey anywhere, but to finish this exercise you will have to have finished Parts 1 and 2. \n 你可以在任何地方開始Python之旅，但是要完成本練習，您必須完成第1部分和第2部分。 \n In this exercise, we will finish building Hangman. In the game of Hangman, the player only has 6 incorrect guesses (head, body, 2 legs, and 2 arms) before they lose the game. \n In Part 1, we loaded a random word list and picked a word from it. In Part 2, we wrote the logic for guessing the letter and displaying that information to the user. In this exercise, we have to put it all together and add logic for handling guesses. \n Copy your code from Parts 1 and 2 into a new file as a starting point. Now add the following features: \n \n Only let the user guess 6 times, and tell the user how many guesses they have left. \n Keep track of the letters the user guessed. If the user guesses a letter they already guessed, don’t penalize them - let them guess again. \n \n 在本練習中，我們將完成“Hangman”的構建。在《Hangman》遊戲中，玩家在輸掉遊戲之前只有6個錯誤的猜測（頭部，身體，2條腿和2條手臂）。 在第1部分中，我們加載了一個隨機單詞列表並從中選擇一個單詞。在第2部分中，我們編寫了猜測字母並將該信息顯示給用戶的邏輯。在本練習中，我們必須將所有內容放在一起並添加邏輯以處理猜測。 將您的代碼從第1部分和第2部分複製到一個新文件中作為起點。現在添加以下功能： \n \n \n 僅讓用戶猜測6次，然後告訴用戶他們還剩下多少猜測。 \n \n \n 跟踪用戶猜測的字母。如果用戶猜出了他們已經猜出的字母，請不要對它們進行懲罰-讓他們再猜一次。 \n \n \n Optional additions: \n \n When the player wins or loses, let them start a new game. \n Rather than telling the user \xa0 "You have 4 incorrect guesses left" , display some picture art for the Hangman. \xa0 This is challenging - do the other parts of the exercise first! \n \n 可選擇的補充： \n \n \n 當玩家贏或輸時，讓他們開始新的遊戲。 \n \n \n 與其告訴用戶“您還有4個錯誤的猜測”，不如為display子手展示一些圖畫。這具有挑戰性-首先進行練習的其他部分！ \n \n \n Your solution will be a lot cleaner if you make use of functions to help you! \n 如果您使用功能來幫助您，您的解決方案將變得更加乾淨！ \n', 'tags': '', 'url': 'Hangman.html'}, {'title': 'Sample Solution(示例解決方案)', 'text': 'Here is a sample solution from a reader that uses the solutions to Parts 1 and 2, and just puts them on one file: \n 這是來自讀者的示例解決方案，使用了第1部分和第2部分的解決方案，並將它們放在一個文件中： \n import random \n \n def choose_random_word(): \n \xa0 \xa0 words=[] \n \xa0 \xa0 with open(\'sowpods.txt\', \'r\') as file: \n \xa0 \xa0 \xa0 \xa0 line = file.readline() \n \xa0 \xa0 \xa0 \xa0 while line: \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 words.append(line.replace("\\n","".strip())) \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 line = file.readline() \n \xa0 \xa0 \xa0 \xa0 choice=words[random.randint(0,len(words)-1)] \n \xa0 \xa0 \xa0 \xa0 return choice \n \n print("Welcome to Hangman!") \n secret_word=choose_random_word() \n dashes=list(secret_word) \n display_list=[] \n for i in dashes: \n \xa0 \xa0 display_list.append("_") \n count=len(secret_word) \n guesses=0 \n letter = 0 \n used_list=[] \n while count != 0 and letter != "exit": \n \xa0 \xa0 print (" ".join(display_list)) \n \xa0 \xa0\xa0 letter=input("Guess your letter: ") \n \n \xa0 \xa0\xa0 if letter.upper() in used_list: \n \xa0 \xa0 \xa0 \xa0\xa0 print("Oops! Already guessed that letter.") \n \xa0 \xa0\xa0 else: \n \xa0 \xa0 \xa0 \xa0\xa0 for i in range(0,len(secret_word)): \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0\xa0 if letter.upper() == secret_word[i]: \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0\xa0 display_list[i]=letter.upper() \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0\xa0 count -= 1 \n \xa0 \xa0 \xa0 \xa0 guesses +=1 \n \xa0 \xa0\xa0used_list.append(letter.upper()) \n \n if letter == "exit": \n \xa0 \xa0 print("Thanks!") \n else: \n \xa0 \xa0 print(" ".join(display_list)) \n \xa0 \xa0\xa0print("Good job! You figured that the word is "+secret_word+" after guessing %s letters!" % guesses) \n And here’s my solution, making more heavy use of functions: \n 這是我的解決方案，更多地使用了功能： \n """\nPractice Python exercise 32\nHangman\nhttp://www.practicepython.org/exercise/2017/01/10/32-hangman.html\n"""\n\nimport random\n\ndef pick_random_word():\n\t"""\n\tThis function picks a random word from the SOWPODS\n\tdictionary. \n\t"""\n\t# open the sowpods dictionary\n\twith open("sowpods.txt", \'r\') as f:\n\t\twords = f.readlines()\n\n\t# generate a random index\n\t# -1 because len(words) is not a valid index into the list `words`\n\tindex = random.randint(0, len(words) - 1)\n\n\t# print out the word at that index\n\tword = words[index].strip()\n\treturn word\n\n\ndef ask_user_for_next_letter():\n\tletter = input("Guess your letter: ")\n\treturn letter.strip().upper()\n\n\ndef generate_word_string(word, letters_guessed):\n\toutput = []\n\tfor letter in word:\n\t\tif letter in letters_guessed:\n\t\t\toutput.append(letter.upper())\n\t\telse:\n\t\t\toutput.append("_")\n\treturn " ".join(output)\n\n\nif __name__ == \'__main__\':\n\tWORD = pick_random_word()\n\n\tletters_to_guess = set(WORD)\n\tcorrect_letters_guessed = set()\n\tincorrect_letters_guessed = set()\n\tnum_guesses = 0\n\n\tprint("Welcome to Hangman!")\n\twhile (len(letters_to_guess) > 0) and num_guesses < 6:\n\t\tguess = ask_user_for_next_letter()\n\n\t\t# check if we already guessed that\n\t\t# letter\n\t\tif guess in correct_letters_guessed or \\\n\t\t\t\tguess in incorrect_letters_guessed:\n\t\t\t# print out a message\n\t\t\tprint("You already guessed that letter.")\n\t\t\tcontinue\n\n\t\t# if the guess was correct\n\t\tif guess in letters_to_guess:\n\t\t\t# update the letters_to_guess\n\t\t\tletters_to_guess.remove(guess)\n\t\t\t# update the correct letters guessed\n\t\t\tcorrect_letters_guessed.add(guess)\n\t\telse:\n\t\t\tincorrect_letters_guessed.add(guess)\n\t\t\t# only update the number of guesses\n\t\t\t# if you guess incorrectly\n\t\t\tnum_guesses += 1\n\n\t\tword_string = generate_word_string(WORD, correct_letters_guessed)\n\t\tprint(word_string)\n\t\tprint("You have {} guesses left".format(6 - num_guesses))\n\n\t# tell the user they have won or lost\n\tif num_guesses < 6:\n\t\tprint("Congratulations! You correctly guessed the word {}".format(WORD))\n\telse:\n\t\tprint("Sorry, you list! Your word was {}".format(WORD)) \n', 'tags': '', 'url': 'Sample Solution(示例解決方案).html'}, {'title': '程式試打', 'text': 'secret_word = "hangman" guess = "" guess_count = 0 guess_limit = 3 out_of_guesses = False \n while guess != secret_word and not(out_of_guesses): \xa0 \xa0 if guess_count < guess_limit: \xa0 \xa0 \xa0 \xa0 guess = input("Enter guess: ") \xa0 \xa0 \xa0 \xa0 guess_count +=1 \xa0 \xa0 else: \xa0 \xa0 \xa0 \xa0 out_of_guesses = True if out_of_guesses: \xa0 \xa0 print("Out of Guesses, You LOSE") else: \xa0 \xa0 print("You win!") \n \n \n \n \n \n', 'tags': '', 'url': '程式試打.html'}]};